require(knitr)
knitr::opts_chunk$set(comment = NA, prompt = TRUE, tidy = FALSE,
fig.width = 7, fig.height = 7,echo = TRUE,
message = FALSE, warning = FALSE, cache=FALSE)
Sys.setlocale("LC_TIME", "C")
# Si me descargo los datos
#gds <- getGEO(filename=system.file("extdata/GDS507.soft.gz",package="GEOquery"))
#gds
# usando el paquete geoQuery lo que generará de forma automática el objeto ExpressionSe
gse <- getGEO("GSE125975", GSEMatrix = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# BiocManager::install(version = "3.10")
library(BiocManager)
# Bioconductor version 3.10 (BiocManager 1.30.10), ?BiocManager::install for help
Para instalar los paquetes específicos:
BiocManager :: install (c ("Biobase", "methods"))
library(Biobase)
library(methods)
BiocManager::install("GEOquery")
library(GEOquery)
browseVignettes("GEOquery")
# Si me descargo los datos
#gds <- getGEO(filename=system.file("extdata/GDS507.soft.gz",package="GEOquery"))
#gds
# usando el paquete geoQuery lo que generará de forma automática el objeto ExpressionSe
gse <- getGEO("GSE125975", GSEMatrix = TRUE)
show(gse)
# Look at gsm metadata:
head(Meta(gse))
gsm <- getGEO(filename=system.file("extdata/GSM125975.txt.gz",package="GEOquery"))
show(pData(phenoData(gse125975[[1]]))[1:5,c(1,6,8)])
show(pData(phenoData(GSE125975[[1]]))[1:5,c(1,6,8)])
gse <- getGEO(filename=system.file("extdata/GSE125975.soft.gz",package="GEOquery"))
# Vemos los datos:
summary(gse)
head(Meta(gse))
gds <- getGEO(filename=system.file("GSE125975_series_matrix.txt.gz",package="GEOquery"))
gsm <- getGEO(filename=system.file("extdata/GSE125975_series_matrix.txt.gz",package="GEOquery"))
filePaths = getGEOSuppFiles("GSE125975")
filePaths
# Para acceder a la información fenotípica sobre las muestras, la mejor manera es usar la getGEO()función para obtener el objeto GSE y luego extraer el objeto phenoData de eso. Desafortunadamente, esto significa descargar todo el archivo GSE Matrix.
dim(pData(gse[[1]]))
head(pData(gse[[1]])[, 1:3])
df1 <- getGSEDataTables("GSE3494")
lapply(df1, head)
# Para acceder a la información fenotípica sobre las muestras, la mejor manera es usar la getGEO()función para obtener el objeto GSE y luego extraer el objeto phenoData de eso. Desafortunadamente, esto significa descargar todo el archivo GSE Matrix.
dim(pData(gse[[1]]))
head(pData(gse[[1]])[, 1:3])
# A veces, las GSE incluyen tablas de datos separadas con la información de muestra. Si existen, puede usar la getGSEDataTables()función. Por ejemplo, aquí está el objeto phenoData de una entrada GSE diferente GSE3494 con una tabla de datos.
df1 <- getGSEDataTables("GSE3494")
lapply(df1, head)
head(Meta(gse))
names(GSMList(gse))
GSMList(gse)[[1]]
names(GPLList(gse))
# Para acceder a GEO Sample (GSM), GEO Series (GSE) (listas de archivos GSM que juntos forman un solo experimento) o GEO Dataset (GDS), use la función getGEO()que devuelve una lista de ExpressionSets
gse <- getGEO("GSE120259", GSEMatrix = TRUE)
# Para acceder a GEO Sample (GSM), GEO Series (GSE) (listas de archivos GSM que juntos forman un solo experimento) o GEO Dataset (GDS), use la función getGEO()que devuelve una lista de ExpressionSets
gse <- getGEO("GSE120259", GSEMatrix = TRUE)
library(Biobase)
library(methods)
browseVignettes("GEOquery")
gse <- getGEO("GSE120259", GSEMatrix = TRUE)
show(gse)
filePaths = getGEOSuppFiles("GSE120259")
filePaths
dim(pData(gse[[1]]))
head(pData(gse[[1]])[, 1:3])
df1 <- getGSEDataTables("GSE120259")
lapply(df1, head)
# Para acceder a GEO Sample (GSM), GEO Series (GSE) (listas de archivos GSM que juntos forman un solo experimento) o GEO Dataset (GDS), use la función getGEO()que devuelve una lista de ExpressionSets
gse <- getGEO("GSE125975", GSEMatrix = TRUE)
show(gse)
# Vemos los datos:
summary(gse)
# Acceso a datos sin procesar desde GEO. Si existen datos sin procesar como archivos .CEL en GEO, puede acceder fácilmente a este dea usando la getGEOSuppFiles() función. La función toma una accesión GEO como argumento y descargará todos los datos sin procesar asociados con esa accesión. Por defecto, la getGEOSuppFiles() función creará un directorio dentro del directorio de trabajo actual para almacenar los datos sin procesar. Aquí, las rutas de los archivos descargados (a menudo con una extensión .tar) se almacenan en un marco de datos llamado filePaths.
filePaths = getGEOSuppFiles("GSE125975")
filePaths
filePaths = getGEOSuppFiles("GSE125975")
filePaths
# Para acceder a la información fenotípica sobre las muestras, la mejor manera es usar la getGEO()función para obtener el objeto GSE y luego extraer el objeto phenoData de eso. Desafortunadamente, esto significa descargar todo el archivo GSE Matrix.
dim(pData(gse[[1]]))
head(pData(gse[[1]])[, 1:3])
# A veces, las GSE incluyen tablas de datos separadas con la información de muestra. Si existen, puede usar la getGSEDataTables()función. Por ejemplo, aquí está el objeto phenoData de una entrada GSE diferente GSE3494 con una tabla de datos.
df1 <- getGSEDataTables("GSE125975")
lapply(df1, head)
head(pData(gse[[1]])[, 1:3])
summary(gse)
gpl21382 <- getGEO('GPL21382')
Meta(gpl21382)$title
head(Meta(gpl21382)$series_id)
length(Meta(gpl21382)$series_id)
head(Meta(gpl21382)$sample_id)
length(Meta(gpl21382)$sample_id)
gsmids <- Meta(gpl21382)$sample_id
gsmlist <- sapply(gsmids[1:5],getGEO)
names(gsmlist)
citation("GEOquery")
sessionInfo()
# go through the necessary steps to make a compliant ExpressionSet
rownames(data.matrix) <- probesets
# get the probeset ordering
probesets <- Table(GPLList(gse)[[1]])$ID
data.matrix <- do.call('cbind',lapply(gsmlist,function(x)
{tab <- Table(x)
mymatch <- match(probesets,tab$ID_REF)
return(tab$VALUE[mymatch])
}))
require(knitr)
knitr::opts_chunk$set(comment = NA, prompt = TRUE, tidy = FALSE,
fig.width = 7, fig.height = 7,echo = TRUE,
message = FALSE, warning = FALSE, cache=FALSE)
Sys.setlocale("LC_TIME", "C")
install.packages("affy")
library(affy)
library(affy)
BiocManager :: install (c ("Affy", "Simpleaffy", "annotate"))
require(knitr)
knitr::opts_chunk$set(comment = NA, prompt = TRUE, tidy = FALSE,
fig.width = 7, fig.height = 7,echo = TRUE,
message = FALSE, warning = FALSE, cache=FALSE)
Sys.setlocale("LC_TIME", "C")
library(BiocManager)
library(Biobase)
library(methods)
library(GEOquery)
dim(pData(gse[[1]]))
head(pData(gse[[1]])[, 1:3])
gpl21382 <- getGEO('GPL21382')
Meta(gpl21382)$title
head(Meta(gpl21382)$series_id)
length(Meta(gpl21382)$series_id)
head(Meta(gpl21382)$sample_id)
length(Meta(gpl21382)$sample_id)
gsmids <- Meta(gpl21382)$sample_id
gsmlist <- sapply(gsmids[1:5],getGEO)
names(gsmlist)
citation("GEOquery")
sessionInfo()
# Read the CEL files
library(oligo)
BiocManager :: install (c ("oligo", "pd.mogene.2.1.st", "arrayQualityMetrics", "pvca"))
library(oligo)
library(pd.mogene.2.1.st)
# Read the CEL files
library(oligo)
# Read the CEL files
celFiles <- list.celfiles("GSE125975", full.names = TRUE)
BiocManager :: install("oligo")
library(oligo)
sampleInfo <- read.AnnotatedDataFrame("GSE125975", header = TRUE, row.names = 1, sep="\t")
library(affy)
sampleInfo <- read.AnnotatedDataFrame("GSE125975", header = TRUE, row.names = 1, sep="\t")
library(affy)
affy.data = ReadAffy("GSE125975")
library(affy)
affy.data = ReadAffy("GSE125975_RAW.tar")
sampleInfo <- read.AnnotatedDataFrame("GSE125975_series_matrix.txt.gz", header = TRUE, row.names = 1, sep="\t")
library(affy)
colnames(gse)
files = list.files("/GSE125975",
full.names = TRUE)
affy.data = ReadAffy(filenames = files)
data = ReadAffy(celfile.path=files)
mypath = "/GSE125975"
data = ReadAffy(celfile.path=mypath)
filePaths
data = ReadAffy(celfile.path=filePaths)
affy.data = ReadAffy(filenames = filePaths)
summary(gse)
filePaths = getGEOSuppFiles("GSE125975")
filePaths
affy.data = ReadAffy(filenames = filePaths)
myData <- ReadAffy(celfile.path="/GSE125975_RAW/")
myData <- ReadAffy(celfile.path="/GSE125975_RAW")
myData <- ReadAffy(celfile.path="/GSE125975_RAW.tar")
myData <- ReadAffy(celfile.path="/GSE120259")
myData <- ReadAffy(celfile.path="/GSE120259_RAW.tar")
myData <- ReadAffy(celfile.path="/GSE120259/")
validObject(gse)
sampleNames(gse)
biocLite("arrayQualityMetrics")
arrayQualityMetrics(gse, outdir="quality_assesment", force = T)
BiocManager::install("biocLite")
library(biocLite)
arrayQualityMetrics(gse, outdir="quality_assesment", force = T)
biocLite("arrayQualityMetrics")
BiocManager::install("arrayQualityMetrics")
library(arrayQualityMetrics)
arrayQualityMetrics(gse, outdir="quality_assesment", force = T)
plotDensity.AffyBatch(gse)
validObject(gse)
sampleNames(gse)
boxplot(gse)
normalize.AffyBatch.methods(gse)
eset <- rma(gse)
write.exprs(gse,file="data.txt")
data <- ReadAffy(gse)
celFiles <- list.celfiles(gse)
celFiles <- list.celfiles(filePaths)
my_frame <- data.frame(exprs(filespath))
filePaths = getGEOSuppFiles("GSE125975")
filePaths
my_frame <- data.frame(exprs(filePaths))
data <- ReadAffy(filePaths)
data <- ReadAffy(gse)
# Finally, save the data to an output file to be used by other programs, etc (Data will be log2 transformed and normalized)
boxplot(GSE125975, pch=".")
# Finally, save the data to an output file to be used by other programs, etc (Data will be log2 transformed and normalized)
boxplot(gse, pch=".")
boxplot(filePaths, pch=".")
datos <- pData(gse[[1]])
boxplot(datos, pch=".")
hist(data.matrix(gse), breaks=150)
hist(data.matrix(datos), breaks=150)
datos <- datos[grep("A_", datos[,1]),] #Indirectly remove control probes
rownames(datos) <- datos[,1]
datos <- datos[,-1]
dim(datos)
datos <- pData(gse[[1]])
dim(datos)
hist(data.matrix(datos), breaks=150)
gse
summary(gse)
boxplot(data.frame(exprs(gse[[1]])),main="gse",outline=FALSE)
exprs(gse[[1]])<-log2(exprs(gse[[1]]))
boxplot(data.frame(exprs(gse[[1]])),main="gse",outline=FALSE)
exprs(gse)[1:5,1:5]
exprs(gse)[[1]][1:5,1:5]
summary(exprs(gse)[[1]])
write.table(gse, file="matrix.txt", quote=F, sep="\t")
exprSetRaw = read.delim("matrix.txt")
trmean.col.1 = mean(exprSetRaw[,1], trim=0.02)
# We can apply this command to all columns at once with the "apply" command, where the '2' means to run the command on all columns (and '1' would be to do the same thing on all rows).
trmean = apply(exprSetRaw, 2, mean, trim=0.02)
head(Biobase::pData(gse))
head(Biobase::pData(gse[[1]]))
rownames(gse) <- gse$Array.Data.File
gse <- AnnotatedDataFrame(gse)
rownames(exprSetRaw) <- exprSetRaw$Array.Data.File
exprSetRaw <- AnnotatedDataFrame(exprSetRaw)
head(exprSetRaw)
head(Biobase::pData(exprSetRaw))
Biobase::exprs(exprSetRaw)[1:5, 1:5]
Biobase::exprs(gse)[1:5, 1:5]
Biobase::exprs(gse[[1]])[1:5, 1:5]
head(Biobase::pData(gse[[1]]))
exp_raw <- log2(Biobase::exprs((gse[[1]])))
PCA_raw <- prcomp(t((gse[[1]]), scale. = FALSE))
exp_raw <- log2(Biobase::exprs((gse[[1]])))
PCA_raw <- prcomp(t((gse[[1]]), scale = FALSE))
exp_raw <- log2(Biobase::exprs((gse[[1]])))
PCA_raw <- prcomp(t((gse[[1]])))
exp_raw <- log2(Biobase::exprs((exprSetRaw)))
exp_raw <- log2(Biobase::exprs((gse[[1]])))
PCA_raw <- prcomp(t((exprSetRaw)))
exp_raw <- log2(Biobase::exprs((gse[[1]])))
PCA_raw <- prcomp(t((exprSetRaw), scale = FALSE))
sampleNames(matrix)
sampleNames(exprSetRaw)
exprSetRaw = read.delim("matrix.txt", header= TRUE)
